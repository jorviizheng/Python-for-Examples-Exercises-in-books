# Django 1.8.2 文档
# http://python.usyiyi.cn/django_182/index.html

# -------------------------------------------------------------------------------------
# 一、安装
'''
1. python2.7 （Linux自带2.6的操作）
  下载 https://www.python.org/downloads/source/
  ./configure --prefix=/usr/local/python2.7
  make && make install
  
  查找python命令目录
  whereis python
  mv /usr/bin/python /usr/bin/python2.6_bak
  
  mv //usr/local/python2.7/bin/python2.7 /usr/bin/python


2. setuptools 安装
  python setup.py install
  
3. pip 安装
  python setup.py install

4. Django安装
  pip install django
  
5. 验证 or 查看版本
  >>> import django
  >>> print(django.get_version())
  1.8
  
'''

# -----------------------------------------------------------------------------------------------
# 入门 - 第1部分 - 模型
'''
目标：基本的投票应用。
    它包含两部分：
    一个对外的网站，可以让人们查看投票的结果并让他们进行投票。
    一个管理网站，可让你添加、修改和删除选票。



1. 创建一个项目
    cd /data/django
    django-admin.py startproject mysite
    这将会在你的当前目录下生成一个 mysite目录
  
2. 数据库的建立 (mysql)
    默认情况下，该配置使用SQLite，但本次学习中，lxf改用mysql；
  
  1) mysql操作
     mysql安装
     mysql帐号
     创建库：create database django_test;
     
     Python MySQLdb安装:pip install MySQL-python
  
  2） vim settings.py 设置 sql 配置
      cd /data/django/mysite
      vim settings.pyc
        DATABASES = DATABASES = {
          'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME' : 'django_test',  #mysql数据库名
            'USER' : 'root',         #mysql用户名
            'PASSWORD':'mysql密码',
            'HOST':'127.0.0.1',
            'PORT':'3306',
           }
        }
      
  3) django创建数据库
     python manage.py migrate
     
3. 运行 runserver
    cd /data/django/mysite
    python manage.py runserver 0.0.0.0:8888
     
    此时IE访问http://192.168.97.39:8000/， 显示It Works。


4. 创建模型
    在的manage.py文件同级目录创建我们的投票应用，以便可以将它作为顶层模块导入，而不是mysite的子模块。
    
    1） 创建应用polls（投票系统）
        cd /data/django/mysite
        python manage.py startapp polls
    
       此时生成文件夹 polls
       
    2)  编辑 models.py
        cd /data/django/mysite/polls
        
        vim models.py
            from django.db import models
            class Question(models.Model):
                question_text = models.CharField(max_length=200)      # question_test字段名，CharField类型
                pub_date = models.DateTimeField('date published')     # pub_date字段名， DateTimeField类型
            class Choice(models.Model):
                question = models.ForeignKey(Question)
                choice_text = models.CharField(max_length=200)
                votes = models.IntegerField(default=0)

5.  激活模型
    1） vim mysite/settings.py 修改INSTALLED_APPS设置以包含字符串'polls'
        cd /data/django/mysite/mysite
        vim settings.py
          INSTALLED_APPS = (
              'django.contrib.admin',
              'django.contrib.auth',
              'django.contrib.contenttypes',
              'django.contrib.sessions',
              'django.contrib.messages',
              'django.contrib.staticfiles',
              'polls',  ######增加polls应用#####
          )
          
    2） 让 django知道要现在要包含polls应用
        cd /data/django/mysite/
        python manage.py makemigrations polls
        
        sqlmigrate命令接收迁移文件的名字并返回它们的SQL语句
        python manage.py sqlmigrate polls 0001
        
    3） 再次运行migrate以在你的数据库中创建模型所对应的表
        python manage.py migrate


6. 玩转API
    1) 交互的 shell
        python manage.py shell
          >>> from polls.models import Question, Choice   # Import the model classes we just wrote.
          
          >>> Question.objects.all()
          []
          
          >>> from django.utils import timezone
          >>> q = Question(question_text="What's new?", pub_date=timezone.now())
          >>> q.save()
          
          >>> q.id
          1
          >>> q.question_text
          "What's new?"
          >>> q.pub_date
          datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)
          
          >>> q.question_text = "What's up?"
          >>> q.save()
          >>> Question.objects.all()
          [<Question: Question object>]

    2) 修复  [<Question: Question object>] 这个问题
        vim polls/models.py
            from django.db import models
            
            class Question(models.Model):
                # ....  原内容保留，增加下面def函数
                def __str__(self):              # __unicode__ on Python 2
                    return self.question_text
            
            class Choice(models.Model):
                # .... 原内容保留，增加下面def函数
                def __str__(self):              # __unicode__ on Python 2
                    return self.choice_text
    
    3） 添加一个自定义的方法
        vim polls/models.py        
          import datetime
          
          from django.db import models
          from django.utils import timezone
          
          class Question(models.Model):
              # ... 原内容保留，增加下面def函数
              def was_published_recently(self):
                  return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
    
    4) 此时可以再次交互
       python manage.py shell
        from polls.models import Question, Choice
        
        >>> Question.objects.all()
        >>> Question.objects.filter(id=1)
        >>> Question.objects.filter(question_text__startswith='What')
        
        >>> from django.utils import timezone
        >>> current_year = timezone.now().year
        >>> Question.objects.get(pub_date__year=current_year)
        
        >>> Question.objects.get(pk=1)
        
        >>> q = Question.objects.get(pk=1)
        >>> q.was_published_recently()
        
        >>> q = Question.objects.get(pk=1)
        >>> q.choice_set.all()
        
        >>> q.choice_set.create(choice_text='Not much', votes=0)
        >>> q.choice_set.create(choice_text='The sky', votes=0)
        >>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)
        
        >>> c.question
        >>> q.choice_set.all()
        >>> q.choice_set.count()
        
        >>> Choice.objects.filter(question__pub_date__year=current_year)
        >>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
        >>> c.delete()
        
    5） mysql结果
    
        mysql> select * from polls_choice;
        +----+-------------+-------+-------------+
        | id | choice_text | votes | question_id |
        +----+-------------+-------+-------------+
        |  1 | Not much    |     0 |           1 |
        |  2 | The sky     |     0 |           1 |
        +----+-------------+-------+-------------+
        2 rows in set (0.00 sec)
        
        mysql> select * from polls_question;
        +----+---------------+---------------------+
        | id | question_text | pub_date            |
        +----+---------------+---------------------+
        |  1 | What's up?    | 2016-03-31 06:23:45 |
        +----+---------------+---------------------+
        1 row in set (0.00 sec)
    
'''

# -----------------------------------------------------------------------------------------------
# 入门 - 第2部分 - 管理站点

'''








'''



