#
# pandas库之数据查看、选择
# 《10 Minutes to pandas》
#

# Series：		一维数组
# DataFrame：	二维的表格型数据结构
# Panel ：		三维的数组
import pandas as pd
import numpy as np #注意，有的教程里没写这个库，导致后面跟不上
#import matplotlib.ayplot as plt


# 创建对象
# Series：		一维数组
s = pd.Series([1,3,5,np.nan,6,8])
s.index
# 用时间索引：	创建二维的表格型数据结构
dates = pd.date_range('20161101',periods=6)
df = pd.DataFrame(np.random.randn(6,4),index=dates,columns=list('ABCD'))
# (6,4)对应6行4列， 6行对应dates的6天日期， 4列对应A列，B列，C列，D列


# 字典 创建一个DateFrame
df2 = pd.DataFrame({ 'A':1,
	'B': pd.Timestamp('20130102'),
	'C': pd.Series(1,index=list(range(4)),dtype='float32'),
	'D': np.array([3] * 4,dtype='int32'),
	'E': pd.Categorical(["test","train","test","train"]),
	'F': 'foo' ,
	'G': 'A'})

# 查看数据
dates = pd.date_range('20161101',periods=6)
df = pd.DataFrame(np.random.randn(6,4),index=dates,columns=list('ABCD'))
print df
df.head()
df.tail(3)  #打印倒数 3行
df.index #只打印 横轴标题
df.columns	#只打印 数轴标题
df.values	 # 和 print df 结果一样，但只有数据，没有横轴、数轴的标题
df.describe() #【没看懂】
df.T   # 将行变为列，将列变为行， 例如：4行6列，变为6行4列
df.sort_index(axis=1,ascending=False) #按轴进行排序【没看懂结果这么排序的】
df.sort(columns='B')   #按B列的值进行排序，从小到大
df['A']	#只打印出A列
df[0:3]  #打印第1，2,3行
df['20161102':'20161104']	# 只打印2016.11.02 - 2016.11.04
df.loc[dates[0]]		# 竖着打印 2016.11.01 的4列数据
df.loc[:,['A','B']] # 竖着打印 A列 和 B列 的数据
df.loc['20161102':'20161104',['A','B']]  #打印11.02 - 11.03的A列和B列
df.loc[dates[1],'A']  #打印第2行的A列数据
df.iloc[3]  # 竖着打印 第4行即2016.11.04 的4个数据
df.iloc[3:5,0:2]   #打印第4行5行的 A列和B列
df.iloc[[1,2,4],[0,2]]   #从0计数，打印第2、3、5行的A和C列；
df.iloc[1:3,:]	#从0计数，打印第2,3行的 所有列
df.iloc[:,1:3] #打印所有行的，第2,3列
df.iloc[1,1]  #第2行第2列的 值
df[df.A > 0] 	#打印 A列中大于0的
df[df >0]  # 所有大于0的，未匹配条件的用 NaN表示

#布尔索引
df2 = df.copy()		#df2 = df（复制一个）
df2['E']=['one','one','two','three','four','three']   #加一列 E
df2[df2['E'].isin(['two','four'])]

#设置
s1 = pd.Series([8,2,3,4,5,6],index=pd.date_range('20161102',periods=6))
# 通过标签设置新的值：
df.at[dates[0],'A'] = 0   #此时第1行的第1个值 = 0
#通过位置设置新的值：
df.iat[0,1] = 0  #此时第1行的第2个值 = 0
# 通过一个numpy数组设置一组新值：
#df.loc[:,'D'] = np.array([5] * len[df])

#缺失值处理 - 使用np.nan来代替缺失值,不会包含在计算中
df1 = df.reindex(index=dates[0:4],columns=list(df.columns) + ['E']) #先增加E列
df1.loc[dates[0]:dates[1],'E'] = 1   #E列中，前2行的值设置为1
df1.dropna(how='any') 	# 忽略有 NaN 值得行
df1.fillna(value=5)			# 原 NaN 的值 全部替换为 5
pd.isnull(df1)		# 不二填充， NaN的地方True， 其他有数值的False




