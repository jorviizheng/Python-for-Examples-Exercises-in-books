一、简单的例子
  from flask import Flask
  app = Flask(__name__)

  @app.route('/')
  def hello_world():
          return 'Hello World!!!!!!!!!!!!!!'

  if __name__ == '__main__':
          app.run(host='0.0.0.0',port=5000)

二、改应用自动重启 - 调试模式app.debug
  每次 修改应用之后都需要手动重启服务器。这样不是很方便
  打开调试模式，那么服务器会在修改应用之后自动重启
  app.debug = True
  app.run()
  运行日志中会显示 Detected change in '/data/hello.py', reloading
  
  【绝对不能在生产环境 中使用调试器 。】
 
 
 三、路由
   @app.route('/')
   def index():
          return 'Index Page !!!!!'
   @app.route('/hello')
   def hello_world():
          return 'Hello World    !!!!!!!!!!!!!!'


四、变量规则 - 类似 blog，每人一个url
  @app.route('/user/<username>')
  def show_user_profile(username):
          return 'User %s xxxxxxxxx' %username
  
  IE访问  http://192.168.97.232:5000/user/【变量:lixuefei】
  页面就会变为 User lixuefei xxxxxxxxx
  
  用ID的方法访问
  @app.route('/post/<int:post_id>')
  def show_post(post_id):
          return 'Post %d' %post_id
          
  IE访问http://192.168.97.232:5000/post/【变量：111】
  页面就会变为 post 111
  
  
  
五、唯一的URL；有/与无/的区别
	@app.route('/projects/')
	def projects():
	        return 'The project page'
	@app.route('/about')
	def about():
	        return 'The about page'
	若访问 http://192.168.97.232:5000/projects   -- 可以访问（IE自动补/）
	若访问 http://192.168.97.232:5000/projects/  -- 可以访问
	若访问 http://192.168.97.232:5000/about  	 -- 可以访问
	若访问 http://192.168.97.232:5000/about/  	 -- 404
	

六、URL构建
	@app.route('/')
	def index(): pass

	@app.route('/login')
	def login(): pass	

	@app.route('/user/<username>')
	def profile(username): pass

	with app.test_request_context():
	        print url_for('index')
	        print url_for('login')
	        print url_for('login',next='/')
	        print url_for('profile',username='xuefei.li')	
		
七、HTTP方法
		from flask import Flask,render_template
		@app.route('/login',methods=['GET','POST'])
		
		def login():
		        if request.method == 'POST':
		                do_the_login()		
		        else:
		                show_the_login_form()		
		
		
八、渲染模板		
	[run.py]
		from flask import render_template
		@app.route('/hello/')		
		@app.route('/hello/<name>')
		def hello(name=None):
		    return render_template('hello.html', name=name)		
		
	[templates/hello.html --  Jinja2 模板]
		<!doctype html>
		<title>Hello from Flask</title>		
		{% if name %}
		  <h1>Hello {{ name }}!</h1>		
		{% else %}
		  <h1>Hello World!</h1>
		{% endif %}			
	模板继承可以使每个页面的特定元素（如页头，导航，页尾）保持 一致。		
		
		
九、操作请求数据
	本地环境
		既然这个对象是全局的，怎么还能保持线程安全？答案是本地环境：
		一个请求进来了，服务器决定生成一个新线程
		当 Flask 开始其内部请求处理时会把当前线程作为活动环境，并把当前应用和 WSGI 环境 绑定到这个环境（线程）。
		这对你有什么用？基本上你可以完全不必理会
		在测试 时会遇到，最简单的单元测试解决方案是使用 test_request_context() 环境管理器

	请求对象
		详情参见 request 
		from flask import Flask,request
		app = Flask(__name__)
		@app.route('/login',methods=['POST','GET'])		
		def login():
		        error = None
		        if request.method == 'POST':		
		                if valid_login(request.form['username'],request.form['password']):
		                        return log_the_user_in(request.form['username'])
		                else:
		                        error = 'XXXXXXX Invalid username/password'
		        return render_template('login.html',error=error)

		if __name__ == '__main__':
		        app.debug = True
		        app.run(host='0.0.0.0',port=5000)
		
	文件上传		
		HTML 表单中设置 enctype="multipart/form-data" 属性
		通过请求对象 files 属性来访问上传的文件。每个上传的文件都储存在这个 字典型属性中。
		另外多出一个 用于把上传文件保存到服务器的文件系统中的 save() 方法
		from flask import Flask,request
		app = Flask(__name__)		
		@app.route('/upload',methods=['GET','POST'])		
		def upload_file():
		        if request.method == 'POST':
		                f = request.files['the_file']
		                f.save('/data/flask_file/uploaded_file.txt')
		if __name__ == '__main__':
		        app.debug = True
		        app.run(host='0.0.0.0',port=5000)	
			
		如果想要把客户端的文件名作为服务器上的文件名， 可以通过 Werkzeug 提供的 secure_filename() 函数:
		可以使用 filename 属性，值是 可以伪造的，永远不要信任这个值。
		from flask import Flask,request
		form werkzeug import secure_filename		
		app = Flask(__name__)
		@app.route('/upload',methods=['GET','POST'])		
		def upload_file():
		        if request.method == 'POST':
		                f = request.files['the_file']
		                f.save('/data/flask_file/' + secure_filename(f.filename))
		if __name__ == '__main__':
		        app.debug = True
		        app.run(host='0.0.0.0',port=5000)

	Cookies
		 在 Flask 中，如果能够使用 会话 ，那么就不要直接使用 cookies ，因为 会话比较安全一些。
		读取Cookies
		@app.route('/')
		def index():
		        username = requests.cookies.get('username')
    	# 使用 cookies.get(key) 来代替 cookies[key] ，以避免当 cookie 不存在时引发 KeyError 。
		储存 cookies:
		@app.route('/')
		def index():
		        resp = make_response(render_template(...))
		        resp.set_cookie('username','the username')
		        return resp
		
十、重定向和错误
	使用 redirect() 函数可以重定向。使用 abort() 可以更早 退出请求，并返回错误代码401:
	也可以改变错误代码 400，404，200等		
		from flask import abort,redirect,url_for
		from flask import Flask		

		app = Flask(__name__)

		@app.route('/')
		def index():
		        return redirect(url_for('login'))		

		@app.route('/login')
		def login():
		        abort(401)
		        this_is_never_executed()
		
		# 自定义错误页面；
		@app.errorhandler(401)
		def page_not_found(error):
		        return render_template('page_not_found.html'),401

		if __name__ == '__main__':
		        app.debug = True
		        app.run(host='0.0.0.0',port=5000)


十一、关于响应
	@app.errorhandler(404)
	def not_found(error):
	    return render_template('error.html'), 404
	可以使用 make_response() 包裹返回表达式，获得响应对象，并对该对象 进行修改，然后再返回：

	@app.errorhandler(404)
	def not_found(error):
	    resp = make_response(render_template('error.html'), 404)
	    resp.headers['X-Something'] = 'A value'
	    return resp
	    
十二、会话
	除了请求对象之外还有一种称为 session 的对象，允许你在不同请求 之间储存信息。
	这个对象相当于用密钥签名加密的 cookie ，即用户可以查看你的 cookie ，但是如果没有密钥就无法修改它。

	[示例]
		from flask import Flask,session,redirect,url_for,escape,request
		app = Flask(__name__)
		@app.route('/')
		def index():
		        if 'username' in session:
		                return 'Logged in as %s' %escape(session['username'])
		        return 'You are not logged in'
		@app.route('/login',methods=['GET','POST'])
		def login():
		        if request.method == 'POST':
		                session['username'] = request.form['username']
		                return redirect(url_for('index'))
		        return '''
		                <form action="" method="post">
		                        <p><input type=text name=username>
		                        <p><input type=submit value=Login>
		                </form>
		        '''
		@app.route('/logout')
		def logout():
		        session.pop('username',None)
		        return redirect(url_for('index'))
		app.secret_key = 'A0Z'
		if __name__ == '__main__':
		        app.debug = True
		        app.run(host='0.0.0.0',port=5000)
	

	[输入框]
	    <form action="" method="post">
            <p><input type=text name=username>
        </form>	

	[按钮]21563+
	
	    <form action="" method="post">
            <p><input type=submit value=xxx>
            类型=submit ； 按钮名称=xxx
        </form>	
	
十三、日志
	app.logger.debug('A value for debugging')
	app.logger.warning('A warning occurred (%d apples)', 42)
	app.logger.error('An error occurred')	


# ===============================================================
根据以上 一 ~ 十三的复习；
# ===============================================================

14. 输入帐号（1个参数）：第一次是GET， 输入字段，然后POST回显
	@app.route('/eyou',methods=['GET','POST'])
	def eyou():
	        if request.method == 'POST':
	                session['eyouname'] = request.form['eyouname']
	                return 'xxxx eyouname == %s' %escape(session['eyouname'])

	        return '''
	                <form action="" method="post">
	                        <p>Hi lixuefei!
	                        <p>  
	                        <p>Please input eyouname
	                        <p><input type=text name=eyouname>
	                        <p><input type=submit value=xxx>
	                </form>
	        '''
	app.secret_key = 'A0Z'

	假如 session['这里有错误'] = request.form['eyouname']，那么eyouname永远是上一次成功的value
	加入 app.secret_key = 错误； 会报错







